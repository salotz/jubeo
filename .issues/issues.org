* Issues

** TODO 0000: Auto Version Increment                                :feature:

This is a feature that should go in the ~py~ and ~dev~ modules.

Support for:

- date versions
- major, minor, micro
- alpha
- beta
- dev
- rc

version bump only does major minor micro.


Ideas:

- PEGs
- regexes
- staged template files
- comment bounded replacements

Should pick one. I like to be deterministic and debuggable so I prefer
the templates options.

Because we are only replacing small snippets of text out of
potentially large documents I would like use the comment bounded
replacements.


** DONE 0001: Add support for different python versions via pyenv   :feature:

In the python module we want to support using different versions of
python with environments like we can in conda.

This should take two forms:

- using venv like normal but switching to the right version in pyenv
- actually making the virtualenv with pyenv

#+begin_src bash
pyenv virtualenv 2.7.17 testing-otherversion
#+end_src

The problem with the former is that not all versions of python support
venv which I am using.

So for modern development it is fine but for testing a bunch of them
it won't work.


venv works with 3.3 and above.


In the end I made it work with a patch to the pyenv-virtualenv
code. Its a little hacky but it works.

Should think about moving to something more robust like nox.

** DONE 0002: Add support for nox in py                             :feature:


Nox is a nice test runner like tox but it works like invoke. Its very
nice and works so easily (unlike tox which I alwasy have endless
problems with whenever I try it).

It even supports conda and you can save the envs for doing interactive
stuff with.

Should integrate nicely with the invoke targets so we don't end up
duplicating them all over the place.

- [X] pyenv in general integration
- [X] conda

** TODO 0003: Add docs for file targets                             :feature:

Add a feature where you can query about the current repository
structure.

First would be to just have consistency information about the
structure in the repo.

#+begin_src bash
jubeo check .
#+end_src

Or have it for specific subdirectories:

#+begin_src bash
jubeo check info
#+end_src

And it will tell you:

- if everything expected is there
- if there are any extra things that are not explicitly ignored
- if there are ignored things there
- integrate with the doit cache to tell you about those things

Also we want to have documentation for every file so can say:

#+begin_src bash
jubeo help README.org
jubeo help info
jubeo help tasks/config.py
#+end_src

And it will tell you about each thing if it knows about them.

This can be useful in any context.
